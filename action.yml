name: "Registry release listener"
description: "Listens for new releases on registry packages"
inputs:
  token:
    description: "Github Access Token"
    required: true
  gh-name:
    description: "Github account name"
    required: true
  gh-email:
    description: "Github account email"
    required: true
  aws-access-key-id:
    description: "AWS access key ID"
  aws-secret-access-key:
    description: "Github account name"
  aws-access-region:
    description: "The AWS Region used by the access credentials"


runs:
  using: composite
  steps:
    - name: "Get package registry data"
      uses: actions/checkout@v3
      with:
        repository: swift-nav/package-registry
        token: ${{ inputs.token }}
        ref: main

    - name: Set up credentials
      if: ${{ inputs.aws-access-key-id != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-access-region }}
    - name: "Store name and version env vars"
      shell: bash
      run: |
        echo "NAME=${NAME:=${{ github.event.repository.name }}}" >> $GITHUB_ENV
        echo "VERSION=${VERSION:=${GITHUB_REF##*/}}" >> $GITHUB_ENV
        echo "BRANCH=coolbot/update-$NAME-$VERSION" >> $GITHUB_ENV
        echo "Stored $NAME and $VERSION, attempting to create branch $BRANCH"

    - name: "Ensures release is not linked"
      shell: bash
      working-directory: data
      run: |
        if cat ${NAME,,} | grep "\"version\":\"${VERSION}\""; then
          exit 1
        fi

    - name: "Pull gen"
      shell: bash
      run: curl https://swiftnav-releases.s3.us-west-2.amazonaws.com/swift-cli/reg-gen -o gen

    - name: "Modify data to link release"
      shell: bash
      env:
        NAME: ${{ env.NAME }}
        VERSION: ${{ env.VERSION }}
        GH_TOKEN: ${{ inputs.token }}
      run: |
        gh auth setup-git
        (git show-branch $BRANCH &>/dev/null) && (git checkout $BRANCH) || (git checkout -b $BRANCH)
        echo "checked out"
        git reset --hard origin/main
        git status
        chmod +x ./gen
        ./gen

    - name: "Create pull request from changes"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        git config --global user.email "${{ inputs.gh-email }}"
        git config --global user.name "${{ inputs.gh-name }}"
        git add data
        git commit -m "Updating release for ${{ env.NAME }}-${{ env.VERSION }}"
        
        git status
        {
          (git push --set-upstream origin $BRANCH &> /dev/null) &&
          (gh pr create \
            --title "Release for ${{ env.NAME }}-${{ env.VERSION }}" \
            --body "Automated registry sync for ${{ env.NAME }} created by tag ${{ env.VERSION }}" \
            --reviewer swift-nav/devinfra)
        } || {
          (git push origin $BRANCH -f)
        }
          
